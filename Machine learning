text,label
"I love this product! It's amazing.",positive
"It's okay, not the best.",neutral
"Terrible experience. Waste of money.",negative
import pandas as pd
import nltk
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report
import pickle

nltk.download('stopwords')
from nltk.corpus import stopwords
import string

# Load data
df = pd.read_csv('reviews.csv')

# Preprocessing
stop_words = set(stopwords.words('english'))

def preprocess(text):
    text = text.lower()
    text = ''.join([c for c in text if c not in string.punctuation])
    return ' '.join([word for word in text.split() if word not in stop_words])

df['clean_text'] = df['text'].apply(preprocess)

# Vectorize
tfidf = TfidfVectorizer()
X = tfidf.fit_transform(df['clean_text'])
y = df['label']

# Train model
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)
model = LogisticRegression()
model.fit(X_train, y_train)

# Evaluate
y_pred = model.predict(X_test)
print(classification_report(y_test, y_pred))

# Save model and vectorizer
pickle.dump(model, open('sentiment_model.pkl', 'wb'))
pickle.dump(tfidf, open('vectorizer.pkl', 'wb'))
from flask import Flask, request, jsonify, render_template
import pickle

app = Flask(__name__)
model = pickle.load(open('sentiment_model.pkl', 'rb'))
vectorizer = pickle.load(open('vectorizer.pkl', 'rb'))

@app.route('/')
def home():
    return '''
    <form action="/predict" method="post">
        <textarea name="review" rows="4" cols="50" placeholder="Enter your review..."></textarea><br>
        <input type="submit" value="Analyze">
    </form>
    '''

@app.route('/predict', methods=['POST'])
def predict():
    review = request.form['review']
    vect = vectorizer.transform([review])
    prediction = model.predict(vect)[0]
    prob = model.predict_proba(vect).max()
    return f"Predicted Sentiment: <b>{prediction.capitalize()}</b><br>Confidence: {round(prob * 100, 2)}%"

if __name__ == '__main__':
    app.run(debug=True)
